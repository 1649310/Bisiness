window.ITVDN = {};

(function() {
  var me = {};

  me.isEmail = function(email) {
    var re = /^(|(([A-Za-z0-9]+_+)|([A-Za-z0-9]+\-+)|([A-Za-z0-9]+\.+)|([A-Za-z0-9]+\++))*[A-Za-z0-9]+@((\w+\-+)|(\w+\.))*\w{1,63}\.[a-zA-Z]{2,6})$/;
    return re.test(email);
  };

  me.isNumber = function(number) {
    var re = /^\d+$/;
    return re.test(number);
  };

  me.isNotEmpty = function(str) {
    return Boolean(str);
  };
  ITVDN.validation = me;
})();

(function() {
  var me = {};
  var form = document.querySelector(".form-container");
  var closeButton = null;

  function onClose() {
    me.close();
    closeButton.removeEventListener("click", onClose);
  }

  me.open = function() {
    form.classList.remove("is-hidden");

    closeButton = document.querySelector(".form__close-button");
    closeButton.addEventListener("click", onClose);
  };
  me.close = function() {
    form.classList.add("is-hidden");
  };

  me.isValid = function() {
    var requiredFields = document.querySelectorAll('[data-valid="required"]');
    var emailValue = document.querySelector("[data-email]").value;
    var numberValue = document.querySelector("[data-number").value;

    if (!me.isAllCompleted(requiredFields)) {
      console.log("Заполните пожалуйста все необходимые поля");
      return false;
    } else if (!ITVDN.validation.isEmail(emailValue)) {
      alert("Не верный email");
      return false;
    } else if (!ITVDN.validation.isNumber(numberValue)) {
      console.log("Не верный номер");
      return false;
    }
    return true;
  };

  me.isAllCompleted = function(data) {
    var result = true;
    for (var i = 0; i < data.length; i++) {
      if (!ITVDN.validation.isNotEmpty(data[i].value)) {
        result = false;
      }
    }
    return result;
  };
  ITVDN.form = me;
})();

(function() {
  var me = {};

  me.toggleToActiveLink = function(target) {
    var links = document.querySelectorAll(".nav__link");
    var showedSection = target.dataset.link;

    for (var i = 0; i < links.length; i++) {
      if (links[i].classList.contains("nav__link--active")) {
        links[i].classList.remove("nav__link--active");
      }
    }
    target.classList.add("nav__link--active");
    scrollToActiveSection(showedSection);
  };

  function scrollToActiveSection(showedSection) {
    var section = document.querySelector("." + showedSection);
    var coords = section.getBoundingClientRect();
    var animateTime = 0.4;

    var timerId = setInterval(function() {
      if (window.scrollY < coords.top) {
        window.scrollBy(0, 10);
      } else {
        clearInterval(timerId);
      }
    }, animateTime || 0.5);
  }

  ITVDN.navigation = me;
})();

(function() {
  //Add event listener for open form button
  var openFormButton = document.querySelector(".arrow-down");
  var form = document.querySelector(".form");
  var nav = document.querySelector(".nav");

  if (openFormButton) {
    openFormButton.addEventListener("click", function(e) {
      e.preventDefault();
      ITVDN.form.open();
    });
  }

  if (form) {
    form.addEventListener("submit", function(e) {
      e.preventDefault();
      if (ITVDN.form.isValid()) {
        console.log("All good");
      } else {
        console.log("Is not valid");
      }
    });
  }
  if (nav) {
    nav.addEventListener("click", function(e) {
      var target = e.target;

      if (target.tagName.toLowerCase() !== "a") {
        return;
      }

      e.preventDefault();
      ITVDN.navigation.toggleToActiveLink(target);
    });
  }
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluaXQuanMiLCJ2YWxpZGF0aW9uLmpzIiwiZm9ybS5qcyIsIm5hdmlnYXRpb24uanMiLCJtYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIndpbmRvdy5JVFZETiA9IHt9O1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgdmFyIG1lID0ge307XHJcblxyXG4gIG1lLmlzRW1haWwgPSBmdW5jdGlvbihlbWFpbCkge1xyXG4gICAgdmFyIHJlID0gL14ofCgoW0EtWmEtejAtOV0rXyspfChbQS1aYS16MC05XStcXC0rKXwoW0EtWmEtejAtOV0rXFwuKyl8KFtBLVphLXowLTldK1xcKyspKSpbQS1aYS16MC05XStAKChcXHcrXFwtKyl8KFxcdytcXC4pKSpcXHd7MSw2M31cXC5bYS16QS1aXXsyLDZ9KSQvO1xyXG4gICAgcmV0dXJuIHJlLnRlc3QoZW1haWwpO1xyXG4gIH07XHJcblxyXG4gIG1lLmlzTnVtYmVyID0gZnVuY3Rpb24obnVtYmVyKSB7XHJcbiAgICB2YXIgcmUgPSAvXlxcZCskLztcclxuICAgIHJldHVybiByZS50ZXN0KG51bWJlcik7XHJcbiAgfTtcclxuXHJcbiAgbWUuaXNOb3RFbXB0eSA9IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgcmV0dXJuIEJvb2xlYW4oc3RyKTtcclxuICB9O1xyXG4gIElUVkROLnZhbGlkYXRpb24gPSBtZTtcclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gIHZhciBtZSA9IHt9O1xyXG4gIHZhciBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb3JtLWNvbnRhaW5lclwiKTtcclxuICB2YXIgY2xvc2VCdXR0b24gPSBudWxsO1xyXG5cclxuICBmdW5jdGlvbiBvbkNsb3NlKCkge1xyXG4gICAgbWUuY2xvc2UoKTtcclxuICAgIGNsb3NlQnV0dG9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvbkNsb3NlKTtcclxuICB9XHJcblxyXG4gIG1lLm9wZW4gPSBmdW5jdGlvbigpIHtcclxuICAgIGZvcm0uY2xhc3NMaXN0LnJlbW92ZShcImlzLWhpZGRlblwiKTtcclxuXHJcbiAgICBjbG9zZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9fY2xvc2UtYnV0dG9uXCIpO1xyXG4gICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9uQ2xvc2UpO1xyXG4gIH07XHJcbiAgbWUuY2xvc2UgPSBmdW5jdGlvbigpIHtcclxuICAgIGZvcm0uY2xhc3NMaXN0LmFkZChcImlzLWhpZGRlblwiKTtcclxuICB9O1xyXG5cclxuICBtZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgcmVxdWlyZWRGaWVsZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS12YWxpZD1cInJlcXVpcmVkXCJdJyk7XHJcbiAgICB2YXIgZW1haWxWYWx1ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1lbWFpbF1cIikudmFsdWU7XHJcbiAgICB2YXIgbnVtYmVyVmFsdWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtbnVtYmVyXCIpLnZhbHVlO1xyXG5cclxuICAgIGlmICghbWUuaXNBbGxDb21wbGV0ZWQocmVxdWlyZWRGaWVsZHMpKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwi0JfQsNC/0L7Qu9C90LjRgtC1INC/0L7QttCw0LvRg9C50YHRgtCwINCy0YHQtSDQvdC10L7QsdGF0L7QtNC40LzRi9C1INC/0L7Qu9GPXCIpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9IGVsc2UgaWYgKCFJVFZETi52YWxpZGF0aW9uLmlzRW1haWwoZW1haWxWYWx1ZSkpIHtcclxuICAgICAgYWxlcnQoXCLQndC1INCy0LXRgNC90YvQuSBlbWFpbFwiKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSBlbHNlIGlmICghSVRWRE4udmFsaWRhdGlvbi5pc051bWJlcihudW1iZXJWYWx1ZSkpIHtcclxuICAgICAgY29uc29sZS5sb2coXCLQndC1INCy0LXRgNC90YvQuSDQvdC+0LzQtdGAXCIpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9O1xyXG5cclxuICBtZS5pc0FsbENvbXBsZXRlZCA9IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgIHZhciByZXN1bHQgPSB0cnVlO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICghSVRWRE4udmFsaWRhdGlvbi5pc05vdEVtcHR5KGRhdGFbaV0udmFsdWUpKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfTtcclxuICBJVFZETi5mb3JtID0gbWU7XHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICB2YXIgbWUgPSB7fTtcclxuXHJcbiAgbWUudG9nZ2xlVG9BY3RpdmVMaW5rID0gZnVuY3Rpb24odGFyZ2V0KSB7XHJcbiAgICB2YXIgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm5hdl9fbGlua1wiKTtcclxuICAgIHZhciBzaG93ZWRTZWN0aW9uID0gdGFyZ2V0LmRhdGFzZXQubGluaztcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmtzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChsaW5rc1tpXS5jbGFzc0xpc3QuY29udGFpbnMoXCJuYXZfX2xpbmstLWFjdGl2ZVwiKSkge1xyXG4gICAgICAgIGxpbmtzW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJuYXZfX2xpbmstLWFjdGl2ZVwiKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJuYXZfX2xpbmstLWFjdGl2ZVwiKTtcclxuICAgIHNjcm9sbFRvQWN0aXZlU2VjdGlvbihzaG93ZWRTZWN0aW9uKTtcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBzY3JvbGxUb0FjdGl2ZVNlY3Rpb24oc2hvd2VkU2VjdGlvbikge1xyXG4gICAgdmFyIHNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiICsgc2hvd2VkU2VjdGlvbik7XHJcbiAgICB2YXIgY29vcmRzID0gc2VjdGlvbi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIHZhciBhbmltYXRlVGltZSA9IDAuNDtcclxuXHJcbiAgICB2YXIgdGltZXJJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAod2luZG93LnNjcm9sbFkgPCBjb29yZHMudG9wKSB7XHJcbiAgICAgICAgd2luZG93LnNjcm9sbEJ5KDAsIDEwKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjbGVhckludGVydmFsKHRpbWVySWQpO1xyXG4gICAgICB9XHJcbiAgICB9LCBhbmltYXRlVGltZSB8fCAwLjUpO1xyXG4gIH1cclxuXHJcbiAgSVRWRE4ubmF2aWdhdGlvbiA9IG1lO1xyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgLy9BZGQgZXZlbnQgbGlzdGVuZXIgZm9yIG9wZW4gZm9ybSBidXR0b25cclxuICB2YXIgb3BlbkZvcm1CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFycm93LWRvd25cIik7XHJcbiAgdmFyIGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvcm1cIik7XHJcbiAgdmFyIG5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2XCIpO1xyXG5cclxuICBpZiAob3BlbkZvcm1CdXR0b24pIHtcclxuICAgIG9wZW5Gb3JtQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgSVRWRE4uZm9ybS5vcGVuKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGlmIChmb3JtKSB7XHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGlmIChJVFZETi5mb3JtLmlzVmFsaWQoKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQWxsIGdvb2RcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJJcyBub3QgdmFsaWRcIik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBpZiAobmF2KSB7XHJcbiAgICBuYXYuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xyXG5cclxuICAgICAgaWYgKHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwiYVwiKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIElUVkROLm5hdmlnYXRpb24udG9nZ2xlVG9BY3RpdmVMaW5rKHRhcmdldCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn0pKCk7XHJcbiJdfQ==
